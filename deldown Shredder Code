import os
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
import threading

class FileShredder:
    def __init__(self, root):
        self.root = root
        self.root.title("Deldown Dateien Shredder")
        self.setup_ui()

    def setup_ui(self):
        self.file_paths = []

        # Logo einbinden
        logo_path = "C:/dds/deldown_logo.png"
        if os.path.exists(logo_path):
            self.logo = tk.PhotoImage(file=logo_path)
            self.root.iconphoto(True, self.logo)

        self.select_file_label = tk.Label(self.root,
                                          text="Wähle eine Datei aus:")
        self.select_file_label.pack(pady=10)

        self.selected_files_label = tk.Label(self.root, text="")
        self.selected_files_label.pack(pady=5)

        self.choose_button = tk.Button(self.root, text="Datei wählen", command=self.choose_files)
        self.choose_button.pack()

        self.middle_frame = tk.Frame(self.root)
        self.middle_frame.pack(expand=True)

        self.shred_button = tk.Button(self.middle_frame, text="Shreddern", command=self.start_shredding,
                                      state=tk.DISABLED)
        self.shred_button.pack(pady=10)

    def choose_files(self):
        self.file_paths = filedialog.askopenfilenames()
        if self.file_paths:
            self.select_file_label.pack_forget()
            self.selected_files_label.config(text="\n".join(self.file_paths))
            self.choose_button.pack_forget()
            self.shred_button.config(state=tk.NORMAL)

    def start_shredding(self):
        confirm = messagebox.askyesno("Bestätigung", "Bist du sicher, dass du die ausgewählten Dateien unwiderruflich vernichten möchtest?")
        if not confirm:
            return

        self.shred_button.config(state=tk.DISABLED)

        self.progress_var = tk.DoubleVar()
        self.progressbar = ttk.Progressbar(self.root, orient=tk.HORIZONTAL, length=400, mode='determinate',
                                           variable=self.progress_var)
        self.progressbar.pack(pady=10)

        threading.Thread(target=self.shred_files).start()

    def shred_files(self):
        for i, file_path in enumerate(self.file_paths, start=1):
            try:
                with open(file_path, "ab+") as f:
                    for _ in range(10):
                        file_size = os.path.getsize(file_path)
                        f.seek(0)
                        f.write(os.urandom(file_size))
                        f.flush()
                        os.fsync(f.fileno())

                os.remove(file_path)
                self.update_shredded_files(file_path, "Erfolgreich")
            except Exception as e:
                self.update_shredded_files(file_path, "Fehler: " + str(e))

            self.progress_var.set(i / len(self.file_paths) * 100)

        messagebox.showinfo("Erfolg", "Alle Dateien erfolgreich geschreddert!")
        self.reset_ui()

    def update_shredded_files(self, file_path, status):
        self.selected_files_label.config(text="\n".join(self.file_paths))
        self.selected_files_label.pack(pady=5)
        self.shred_button.pack(pady=10)

    def reset_ui(self):
        self.select_file_label.pack()
        self.selected_files_label.config(text="")
        self.choose_button.pack()
        self.shred_button.config(state=tk.DISABLED)
        self.progressbar.pack_forget()

if __name__ == "__main__":
    root = tk.Tk()
    app = FileShredder(root)
    root.mainloop()
